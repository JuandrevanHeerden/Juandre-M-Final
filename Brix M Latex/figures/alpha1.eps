%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 547.000000 732.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H1519) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 547 732
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 547 732
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Helvetica
%!FontType1-1.0: Helvetica 1.0000.0.0000
14 dict begin
/FontName /Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /W put
dup 34 /o put
dup 35 /r put
dup 36 /d put
dup 37 /s put
dup 38 /T put
dup 39 /p put
dup 40 /i put
dup 41 /c put
dup 42 /B put
dup 43 /e put
dup 44 /t put
dup 45 /a put
dup 46 /A put
dup 47 /l put
dup 48 /h put
dup 49 /D put
dup 50 /u put
dup 51 /m put
dup 52 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<








2726353436333217160723262726232206151417161F011617161514062322262701EF082544A864983D27738F894174DBB9F26B4302AA05263E99666945284E77C24269D9DEEFC70701B701505A3057575B4524161D24222A498198BC8E5A683D32474E40462A19131D2F2C45948FD0D9A002F900010017FFEF0209055A00180052B50D2E0AC00E01B8013F40250416391703060E0A111A17171A0301062900150E150F031F030203FC1619191AFC21677D182B2B4EF44DFD5D39C42F3CFD3C104E456544E6002F3F3F3C4DFD3CED10FDE431301333113315231114171633323637150E012322263511233533A8B6ABAB2615310D1E141F43277E5A9191055AFED593FD4538130B01028E0908816702C593000000020080FFE303DE044900170018005E403AB814C81402091308141913191428067703D707070800050E0A00060D0A051D120B180718180B160D2E0A290C0B1A1A01291619191AD2216242182B2B4EF44DED4E10F63C4DFDE41112392F003F3FED3F3F3C391112393130005D015D0111141716333237363511331123370607062322272635112501381A3083BC4425B4AA0223346793E5532D01AF042FFD39523460A85A9D020EFBD19E3D2A5499528902D81A000001006F0000059806600030007EB8005D2BBB001101BD001F00612BBB000C01BC000D00612BBB000501BC000600612BBB000001BD000100612BB8000D10B80023D0B8000C10B80025D0B8000610B8002AD0B8000510B8002CD000B800242FB8002B2FB801B64558B800172F1BB9001701BE3E59B9001501B9F4B80019D0B800192FB8001AD0B8001A2F3031012334022711231126232207112311060215141216332115213533352E023534123637353315363332173533151E01120598C37C9471252F2D2371947C79E69D01D1FBDBDF6B934971D28D71321E1E36718FD37102D3D5011939FDD9023D0907FDC1022539FEE8D49EFF0095A09A0831BDEB77900115CE2AD1BA0404BAD12ACBFEE00000000100000000000067A8FFCC5F0F3CF500110800000000005F4D8F0000000000D8B9A29BF865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B91000100000000000000000000000000000016051200420556001E0556009705C700A504E30021078D0025047300520400003B04730038047300480473008401C7008401C7008906AA0084047300840473003B0473007602AA008904000042023900170473008005EE006F00000036007400F8015A01880254031E03A0040C04D605260554057605F2064E06C60738077E085E08AE090809900000000100000016006F0009006B00070002001000100067000007E80B9000040001B8005D2B01BA000501B9005F2B01BF01BB003E00340029001D0012000000652BBF01BC00

20B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A620456944750000
00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/D 3 def
/T 4 def
/W 5 def
/a 6 def
/c 7 def
/d 8 def
/e 9 def
/h 10 def
/i 11 def
/l 12 def
/m 13 def
/n 14 def
/o 15 def
/p 16 def
/r 17 def
/s 18 def
/t 19 def
/u 20 def
/uni20BE 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1947 -985 2961 2297} readonly def
/UniqueID 4065484 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E0B8C08955DB50295DA0B1284D8D5B935DAA6F05584E2B8991A3710D32F061B813192FF69F85DABC915437238BB5761ADBB1AE2383A5258E250D5215E88FD1302A9AB6E9E0441BFC27F837E02965237D1905360F4A8408B9BDCD8105ECA8E3D5BA080839839591D1D135C924892A9AB7D74A7E815FBDB163BAE029654B488FF01D17B3F52F49A69E34E284C99FFB6B4B94B084C57DCEFCF2499A7E404DCBEE18B6B48C592F5E1D3D12432424D1424C2C74F7370B08F32F100286306320FDC813FABFF04CFC1D709315353DB7BAF7BE089747A607A0396A4E310B7090E4F852A2C92CB2D32E36E1B907CB1EA93033D72434EA21017913B90A0754173101FB75944D74932B0253759ADE1E5EA2CEB23F9EA18646043DA0E7B633E44387B5CD39227A61DF19CC6185FD1DDC2EE9C7DE7AEDA5EC9B86CF582F1A1E6658FD749EC42C9456C6E08E01BA68F7C74BA6701F2AF3CA391EDEE2D8EAD09F149AB72FAB09B863B2DADEEAE41AF17FEC56832C89D21FE5EC057DCDE77B8D64D523C8DA88EBB184ECAA939CB3E3B8540118C33E1C83854FFE3B98EC5644A20C433B02B035B3B7D89DB2838CBBA15AEE58EC6D8838D5945616B4B2DA7623C4932A40FED20A34B914DC0129AB11F0BAF0FA4B89F1A1FC72D177993CE585A5D9C87CC1DF600591B7D0A00AB33CF0A6431FB68746027A751C8B3A60E7EF2CA5F47D3A99901F815B8FA70E079891019B7B39054683F08DA5A479078007D16B0CB69315685704E9AD9CFBA848
6D0F3ECCC630DA64C6DC7E65E69222D7589669F084025066E13C53CCC1CA6398B504FE7EA1D45985033B30EE05011C2789493956EA11BE5B129056F2CB7251F1A23C12BC752033372C2F92A016A44A2F1EB968F3217A544D552B25160A5EACF7EC4DE79C7516AE59E80A1183084403448A5EC54C06B93B480047807C3BB6FBBBCF3557CBA2CDEFB0CB956895F8B843BB6444FBA870622EC907E52A62646CE3918C313186BBA79C84093644670FCDCA3C93758F28003FDDEE3613C051036B9EA76CA4E5A3B7EAC3288DE125C89DA14740AFFEF49BF5577079D3D65FCE08048E7FABCE62AF5A124BF5AF507C0C4A1BC03AD8FD14BC058527DCF07487146E286A82565186E45C0F6C651666B2DDAD6D750C90C9538BBDCE000D6DCD6AF4245A67058612347EBEF20C8500BC183124C7F64C3862D2B220344AF62F7E752D18AEC7ED6FC96418A2740BFD9A02BD05B7C846E0BDB6F0B78ED795590FB2CCC4E251B5248E98D7B8834C1AC05BA02BAA5CB8E2F7E86FDC66E5B3598BF28E53C12100A5654DECA6D4329E858FBE4AFA8323DB34254A45C3791F4B7AFE31A2CB8BDD6BBB9EF77FEF98294D44D5F4928CCEB1BBF0A3CE351761B8AB94A8CB4B1D5CDC28F908A991EB20C8A63D6CC78BD871F9552209E0DD7CD5B84314DC5AD4DF690FC3BCE31F15B327E08779B88FF4C3C6EFB98C410D72D942047BAEF5A57476D04EC3308ACEA0CD6247D9864DE2463BCC0200559D565223317C08BFFE377A3D5C183B2814459B3437ACFF470F9665C7417E4105857FB0246CCFE46B193670CE5C477F50FE467378752CDB4E8783CD930C917FEEAB897894EE39990FFAB244080367D4109229470B97B11DCA7DABA26360E4B701F071B648A316C12240CC062CA268F8C14E59E67A2C3E39B2DF2397CCA8837526B988889176C5185F9B45AC3CBAFE2921C17DF98CE66C9BC197D0CDA6E08C372479312B4232291542C75C22AB2F073F5366D33C70727F5561D70E8F89C8014F5FCFE51112FC003816B84681B1EDBC5E6148280FEB3BE99B2EBBEAB1CDE19104A4A1E22A996DC81D049895B9FB5DC02B14DB167182E9685144AAE385131D5EC46E0B04594FA289A7FC1F13584C9900CB9B550891B6B1C17DADAA59ED291440ED060BF3E07761C781E562AED3062C21003FB0199B6022BFD8B8A1CCA8BB3CEC7D7191F318DE64C32D9D6479DAA473C0492475F42662E308552F9DF8EAF701CA8FEBBEF53FDA1FF0D9E25FDA575F854D8904D6C9C8A38FB7618B182831B148E499FB72A9DE4EF5790BAD61DFB09C3DBFBFC852452C706D63105BEA4DFBB96A3EC6D7D1EA45A6AA8FAA56705782F15739792981483F05B99943B89FD9EB97E0821DB6B5BFE47FD3A9BCAD91B9576EE958096C66A1329174A6F766A573D0B5EE46D635E29DED648454FAD25D26B4267878DA04B7
3D55F6B03440F25D71C0650922F27D9515FA3CCF3305445B985CE6839AAEDD3DD3C1FE6FD00AFC7FD03357DAD5D14BE20E6CA898324F265AEEF6DEF2C5BEA8900B00AB2CD78B1E66DA9DCF73A7E3940208B01A5656D0AEC2BAF59C5C4AB5F8DFA38219F3F95036AE93E6DFAF164B737198CA167DC04095381762EA82303A236A9919327561643AE2AAEFE794E2392C87C69751547B3AA7A7A15B92074448D6CE38B1DB254D0AC7DB9E67F3196F4476E27B576299251785ACFA474AE3E7B1953F0EAE7FF239A2A5DED86B38F67284E71AE99BC7621FDD04BE34FC02674F4BDF0A3BBD9454EE42E64415E02D025FE3C856C2849BDD7C12B12A2052AD5F0ACB19A925F7ED5288014DAE08008589BC5A055CB7EEF38362C3A9575FFC53D9B8539AEC2BB04D1FCCD9E2AF984D71E0703E1B363B19B15CD1C7E0B68A02C5EC3BFB67A62FB375D689C1C5FC78B164F982E200829057B9FB7F8EB5CCB7A64A21BA4122E41B8B639ED4805258F2C5CD47956028D87A3486B85381B1E1FA361C0865926BBEBC7B86E1D15B6134F9701E9AB64FFA7113BEEF0DA70808877438574307DB6179FE068BF5BD0110E9B94CB544816BA38F7612F33B30F7DFA0C384D9842CE5EE009967912D19D4A420F1758A6CEE5EF2FB89ADA326A62DB5AAECDA49903A4A0F579FA6E7E1D422E058DD37929E0C19375B948B02CD431E7B7C58F8923D82DF0E2EE1CD20DE6DD726C72A7D761E122B29CCE87FD054AF96AC642274908FD47C6F959097AE333A25C28CF9A19409E933E46AD3D15ED20A9DDD06CCE3DD0552861ADBA288E7E89F18BBC361A5F76D0313CEA37E470EE9650319F4B9907F99EC8FEE9B27A0A260952D870C924FEFB8E89AD5934F5F5C2F58D5F15B6FDB71CC2DCA747F792C3C4CA120310ACF5FA1F5D84C5CC1D82B8FC45D709490ADE7D0F4A20011E4BB4DDFBD5FB24DAC7DCC05BE432A2BF825771EB240CCA94B5A17474DC170D665A641CD1D9EDE056817A4F34AC20893548A59FEBD1532213B50B6C9456DB4819904DB88706C24A091A73349BFAC7FF21F729027827FB0C8D23361D927252183C0CC6B2B3F354D52D427A21D2B7D8380808DD35D852F8B99F96A580BECCAAD20218E4E50090BDACC37141575136C6826F91B64525B1BAD63A1AE3ABA374753C363CFA42076E57B4CE67AEE6987727D90C48ABF743FB71818B2CEFFEAD2415F9E419A57320DBDC86DA57F02916655397FB340729335322AB088A396BC92F1E77853667C14556666D7600B63CEC644B0EF84B2E656824949B31D8D3BA0C8355CD11E10BAE8074BCD2E43A7E066E3A078C49FD33F66C3531F043E5BF7AD05A0E659D33A7B75B98C11A0D9363E1CF948F5EF358949AD50811E005236B5C4A8A6344E60519387A07C9C4C735E5863DF089152A1EC5DEA705786C38F5E7AEB87EDE872BC
4AB1F0A11D01F3012322B26E85BC8241808D7484C51CB2AEAEB79E08580BA2788CFB80B0F6C10D723E4ED474BA0011EEA7B234579FC180F896ADC89222D9AA4B57F58808AA3C11C29A1FA9B6FBD5AC8A209FEFDAB90F32780BAB00C67DA39BCA6D2DF003D365FD1E8965C12919CD939899D408D99B589A4DD29CBCC94EBC89F454AF5DF273C885C5D5F2582A02813F42430C0CF490156D90DDA9D30ABB24F9CC0B365C5A0341655B3570CE565EA9D4D598829949998A8D0F92684731D2AAC06D6EEB55F1D362249D2F29623DCD67A338207A0AE6AE91A29CC130F123960DD31B6B12FDE5727541F36A3D09671D8FDE2980A20780256CE7835E2DCF2EE7685E3698D64F401F4EAECDEB9DDC86D5E4CCF563EF5545D35575AD7AA1D74156095A20521A7DC80E8A5FD86014698A8550ED4D8BA30FF9C2E2922D5A133F927F3B7278C248C3294A0064B41F78D37B9E19D83EC32665CBF0B68CAE656C4FB42FE1F5A9E8FD28D1BB27D1EB7B428F845C7F8D10AAC408F7C75B4ABAA85BFDB8B7C32DA6A0F4FD9FCA26565F00D781360C537BAA96F4169FADCAB3BEFE54B5DA5DBEF7A29E9529A5C5864AFE9EB2DF44CD520914EC227520EB7C510C0612FB4EDAB21697AAFBCDCA2EC5753F5EC9E8E8D450BBCD1FE1804A978D6FE2626B76EE4EFF52542AC4C98642765CCD990AE6F7A90607C582D50641EB53DA016A57B96DA3522FD29B0BDDEE779C467B585FE1887DC76F6802345D89D28971B6EBE7897C31813794AE6F5415AECCDD4AA11B6395147BBDB8F17882AC0DF716DC7794E2757A8841ECB8E9251C06D18CF344D8C2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Helvetica cguidfix
/F1.1/Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 547 732 rc
0 732 m
547 732 l
547 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1474 1736 m
2597 1736 l
2597 -1212 l
-1474 -1212 l
h
-1474 1736 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 450 632 cm
-414.56693 -39.68504 m
-326.6929 -39.68504 l
-326.6929 574.01575 l
-414.56693 574.01575 l
h
-414.56693 -39.68504 m
S
0 0 0 sc
-360.10684 519.69739 m
-354.29507 525.50916 -354.29507 534.93182 -360.10684 540.74353 c
-365.91858 546.5553 -375.34128 546.5553 -381.15298 540.74353 c
-386.96475 534.93182 -386.96475 525.50916 -381.15298 519.69739 c
-375.34128 513.88562 -365.91858 513.88562 -360.10684 519.69739 c
S
-360.10684 388.16983 m
-354.29507 393.98157 -354.29507 403.40427 -360.10684 409.216 c
-365.91858 415.02774 -375.34128 415.02774 -381.15298 409.216 c
-386.96475 403.40427 -386.96475 393.98157 -381.15298 388.16983 c
-375.34128 382.35806 -365.91858 382.35806 -360.10684 388.16983 c
S
-360.10684 322.40607 m
-354.29507 328.2178 -354.29507 337.64047 -360.10684 343.45221 c
-365.91858 349.26398 -375.34128 349.26398 -381.15298 343.45221 c
-386.96475 337.64047 -386.96475 328.2178 -381.15298 322.40607 c
-375.34128 316.5943 -365.91858 316.5943 -360.10684 322.40607 c
S
-360.10684 256.64227 m
-354.29507 262.45401 -354.29507 271.87671 -360.10684 277.68842 c
-365.91858 283.50018 -375.34128 283.50018 -381.15298 277.68842 c
-386.96475 271.87671 -386.96475 262.45401 -381.15298 256.64227 c
-375.34128 250.83052 -365.91858 250.83052 -360.10684 256.64227 c
S
-360.10684 190.87851 m
-354.29507 196.69023 -354.29507 206.11292 -360.10684 211.92465 c
-365.91858 217.73642 -375.34128 217.73642 -381.15298 211.92465 c
-386.96475 206.11292 -386.96475 196.69023 -381.15298 190.87851 c
-375.34128 185.06674 -365.91858 185.06674 -360.10684 190.87851 c
S
-360.10684 125.11472 m
-354.29507 130.92645 -354.29507 140.34914 -360.10684 146.16087 c
-365.91858 151.97264 -375.34128 151.97264 -381.15298 146.16087 c
-386.96475 140.34914 -386.96475 130.92645 -381.15298 125.11472 c
-375.34128 119.30296 -365.91858 119.30296 -360.10684 125.11472 c
S
-360.10684 59.350945 m
-354.29507 65.162682 -354.29507 74.585358 -360.10684 80.397095 c
-365.91858 86.208855 -375.34128 86.208855 -381.15298 80.397095 c
-386.96475 74.585358 -386.96475 65.162682 -381.15298 59.350945 c
-375.34128 53.539177 -365.91858 53.539177 -360.10684 59.350945 c
S
-360.10684 453.93362 m
-354.29507 459.74536 -354.29507 469.16803 -360.10684 474.97977 c
-365.91858 480.79153 -375.34128 480.79153 -381.15298 474.97977 c
-386.96475 469.16803 -386.96475 459.74536 -381.15298 453.93362 c
-375.34128 448.12186 -365.91858 448.12186 -360.10684 453.93362 c
S
-360.10684 -6.4128361 m
-354.29507 -0.60110092 -354.29507 8.8215761 -360.10684 14.633311 c
-365.91858 20.445076 -375.34128 20.445076 -381.15298 14.633311 c
-386.96475 8.8215761 -386.96475 -0.60110092 -381.15298 -6.4128361 c
-375.34128 -12.224601 -365.91858 -12.224601 -360.10684 -6.4128361 c
S
0.49998799 0.5 0.5 sc
-358.71246 13.026584 m
-193.48163 136.64819 l
S
-356.85437 75.514954 m
-196.13605 141.32735 l
S
-355.78497 136.68886 m
-197.66379 147.88431 l
S
-356.2525 197.55011 m
-196.99588 154.88794 l
S
-357.90289 259.44553 m
-194.63818 160.41417 l
S
-359.81491 322.70618 m
-191.90672 163.99005 l
S
-361.48453 386.95078 m
-189.52153 166.16032 l
S
-362.82034 451.78464 m
-187.61325 167.48877 l
S
-363.86832 516.95886 m
-186.11613 168.33101 l
S
-360.87668 15.351374 m
-190.38988 211.84674 l
S
-359.08673 79.268654 m
-192.94696 214.4846 l
S
-357.18472 142.02672 m
-195.66409 218.77849 l
S
-355.74805 202.67717 m
-355.80206 202.67253 l
S
-355.88397 203.41435 m
-197.52235 225.03012 l
S
-356.04163 264.21576 m
-197.29712 232.11923 l
S
-357.53662 325.84729 m
-195.16139 238.02243 l
S
-359.45508 388.86395 m
-192.42075 241.9469 l
S
-361.1871 452.953 m
-189.94644 244.33939 l
S
-362.58578 517.69629 m
-187.9483 245.79721 l
S
-362.58578 16.634424 m
-187.9483 288.53351 l
S
-361.1871 81.377724 m
-189.94644 289.99133 l
S
-359.45508 145.46677 m
-192.42075 292.38382 l
S
-357.53662 208.48343 m
-195.16139 296.30829 l
S
-356.04163 270.11496 m
-197.29712 302.21149 l
S
-355.88397 330.91635 m
-197.52235 309.3006 l
S
-357.18472 392.30399 m
-195.66409 315.55222 l
S
-359.08673 455.06204 m
-192.94696 319.8461 l
S
-360.87668 518.97937 m
-190.38988 322.48398 l
S
-363.86832 17.371866 m
-186.11613 365.99969 l
S
-362.82034 82.546082 m
-187.61325 366.84195 l
S
-361.48453 147.37994 m
-189.52153 368.17038 l
S
-359.81491 211.62454 m
-191.90672 370.34067 l
S
-357.90289 274.88519 m
-194.63818 373.91656 l
S
-356.2525 336.78061 m
-196.99588 379.44278 l
S
-355.78497 397.64185 m
-197.66379 386.44641 l
S
-356.85437 458.81577 m
-196.13605 393.00336 l
S
-358.71246 521.30414 m
-193.48163 397.68253 l
S
0.5 0.5 0.5 sc
-32.598427 -39.68504 m
55.275593 -39.68504 l
55.275593 574.01575 l
-32.598427 574.01575 l
h
-32.598427 -39.68504 m
S
0 0 0 sc
0 i
/F1.1[ 16 0 0 -16 0 0]sf
-11.63407 611.02362 m
(!"#$%)[ 14.820312 8.898438 5.328125 8.898438 0.000000 ] xS
-199.13246 611.02362 m
(&"'\(\)%)[ 8.000000 8.898438 8.898438 3.554688 8.000000 0.000000 ] xS
-5.1184449 -63.622047 m
(*+,-)[ 10.671875 8.898438 4.445312 0.000000 ] xS
-391.09085 -63.622047 m
(./'0-)[ 10.671875 3.554688 8.898438 8.898438 0.000000 ] xS
-407.09085 611.02362 m
(1"\)23+4,)[ 11.554688 8.898438 8.000000 8.898438 13.328125 8.898438 8.898438 0.000000 ] xS
0.60000002 i
21.861656 519.69739 m
27.673422 525.50916 27.673422 534.93182 21.861656 540.74353 c
16.049921 546.5553 6.6272445 546.5553 0.81550914 540.74353 c
-4.9962559 534.93182 -4.9962559 525.50916 0.81550914 519.69739 c
6.6272445 513.88562 16.049921 513.88562 21.861656 519.69739 c
S
21.861656 388.16983 m
27.673422 393.98157 27.673422 403.40427 21.861656 409.216 c
16.049921 415.02774 6.6272445 415.02774 0.81550914 409.216 c
-4.9962559 403.40427 -4.9962559 393.98157 0.81550914 388.16983 c
6.6272445 382.35806 16.049921 382.35806 21.861656 388.16983 c
S
21.861656 322.40607 m
27.673422 328.2178 27.673422 337.64047 21.861656 343.45221 c
16.049921 349.26398 6.6272445 349.26398 0.81550914 343.45221 c
-4.9962559 337.64047 -4.9962559 328.2178 0.81550914 322.40607 c
6.6272445 316.5943 16.049921 316.5943 21.861656 322.40607 c
S
21.861656 256.64227 m
27.673422 262.45401 27.673422 271.87671 21.861656 277.68842 c
16.049921 283.50018 6.6272445 283.50018 0.81550914 277.68842 c
-4.9962559 271.87671 -4.9962559 262.45401 0.81550914 256.64227 c
6.6272445 250.83052 16.049921 250.83052 21.861656 256.64227 c
S
21.861656 190.87851 m
27.673422 196.69023 27.673422 206.11292 21.861656 211.92465 c
16.049921 217.73642 6.6272445 217.73642 0.81550914 211.92465 c
-4.9962559 206.11292 -4.9962559 196.69023 0.81550914 190.87851 c
6.6272445 185.06674 16.049921 185.06674 21.861656 190.87851 c
S
21.861656 125.11472 m
27.673422 130.92645 27.673422 140.34914 21.861656 146.16087 c
16.049921 151.97264 6.6272445 151.97264 0.81550914 146.16087 c
-4.9962559 140.34914 -4.9962559 130.92645 0.81550914 125.11472 c
6.6272445 119.30296 16.049921 119.30296 21.861656 125.11472 c
S
21.861656 59.350945 m
27.673422 65.162682 27.673422 74.585358 21.861656 80.397095 c
16.049921 86.208855 6.6272445 86.208855 0.81550914 80.397095 c
-4.9962559 74.585358 -4.9962559 65.162682 0.81550914 59.350945 c
6.6272445 53.539177 16.049921 53.539177 21.861656 59.350945 c
S
21.861656 453.93362 m
27.673422 459.74536 27.673422 469.16803 21.861656 474.97977 c
16.049921 480.79153 6.6272445 480.79153 0.81550914 474.97977 c
-4.9962559 469.16803 -4.9962559 459.74536 0.81550914 453.93362 c
6.6272445 448.12186 16.049921 448.12186 21.861656 453.93362 c
S
21.861656 -6.4128361 m
27.673422 -0.60110092 27.673422 8.8215761 21.861656 14.633311 c
16.049921 20.445076 6.6272445 20.445076 0.81550914 14.633311 c
-4.9962559 8.8215761 -4.9962559 -0.60110092 0.81550914 -6.4128361 c
6.6272445 -12.224601 16.049921 -12.224601 21.861656 -6.4128361 c
S
-161.42372 134.35286 m
-153.1212 142.65535 -153.1212 156.11632 -161.42372 164.41879 c
-169.72621 172.72131 -183.18718 172.72131 -191.48965 164.41879 c
-199.79218 156.11632 -199.79218 142.65535 -191.48965 134.35286 c
-183.18718 126.05035 -169.72621 126.05035 -161.42372 134.35286 c
S
-161.42372 212.87256 m
-153.1212 221.17503 -153.1212 234.636 -161.42372 242.93848 c
-169.72621 251.241 -183.18718 251.241 -191.48965 242.93848 c
-199.79218 234.636 -199.79218 221.17503 -191.48965 212.87256 c
-183.18718 204.57004 -169.72621 204.57004 -161.42372 212.87256 c
S
-161.42372 291.39224 m
-153.1212 299.6947 -153.1212 313.15567 -161.42372 321.45816 c
-169.72621 329.76068 -183.18718 329.76068 -191.48965 321.45816 c
-199.79218 313.15567 -199.79218 299.6947 -191.48965 291.39224 c
-183.18718 283.08972 -169.72621 283.08972 -161.42372 291.39224 c
S
-161.42372 369.91193 m
-153.1212 378.21442 -153.1212 391.67535 -161.42372 399.97784 c
-169.72621 408.28036 -183.18718 408.28036 -191.48965 399.97784 c
-199.79218 391.67535 -199.79218 378.21442 -191.48965 369.91193 c
-183.18718 361.60941 -169.72621 361.60941 -161.42372 369.91193 c
S
0.49998799 0.5 0.5 sc
-0.43360728 13.217026 m
-159.63928 136.37613 l
S
-2.3692043 75.677841 m
-156.87415 141.09465 l
S
-3.5038381 136.72438 m
-155.25323 147.83357 l
S
-3.3981245 203.4814 m
-155.40425 224.93434 l
S
-1.27169 259.25656 m
-158.44202 160.68408 l
S
-3.0058312 197.42845 m
-155.96468 155.06174 l
S
0.69569898 322.52722 m
-161.25258 164.2457 l
S
2.3834965 386.80463 m
-163.66371 166.36911 l
S
3.7173417 451.67026 m
-165.5692 167.65216 l
S
4.7550292 516.86951 m
-167.05162 168.45862 l
S
1.7718656 15.510877 m
-162.78995 211.61888 l
S
-0.048733797 79.456551 m
-160.1891 214.21619 l
S
-2.0218637 142.20206 m
-157.37035 218.528 l
S
-3.3981245 203.4814 m
-155.40425 224.93434 l
S
-3.2300529 264.11969 m
-155.64435 232.25647 l
S
-1.653452 325.66339 m
-157.89664 238.28514 l
S
0.32854247 388.68002 m
-160.72806 242.20967 l
S
2.0845945 452.80017 m
-163.23671 244.55771 l
S
3.4841013 517.57623 m
-165.23601 245.9687 l
S
3.4841013 16.754471 m
-165.23601 288.362 l
S
2.0845945 81.530548 m
-163.23671 289.77301 l
S
0.32854247 145.6507 m
-160.72806 292.12106 l
S
-1.653452 208.66731 m
-157.89664 296.04559 l
S
-3.2300529 270.21103 m
-155.64435 302.07425 l
S
-3.3981245 330.8493 m
-155.40425 309.39636 l
S
-2.0218637 392.12866 m
-157.37035 315.80273 l
S
-0.048733797 454.87418 m
-160.1891 320.11453 l
S
1.7718656 518.81982 m
-162.78995 322.71182 l
S
4.7550292 17.461187 m
-167.05162 365.8721 l
S
3.7173417 82.660446 m
-165.5692 366.67856 l
S
2.3834965 147.52609 m
-163.66371 367.96161 l
S
0.69569898 211.8035 m
-161.25258 370.08502 l
S
-1.27169 275.07413 m
-158.44202 373.64664 l
S
-3.0058312 336.90228 m
-155.96468 379.26898 l
S
-3.5038381 397.60635 m
-155.25323 386.49713 l
S
-2.3692043 458.65286 m
-156.87415 393.23605 l
S
-0.43360728 521.11371 m
-159.63928 397.95459 l
S
ep
end
%%Trailer
%%EOF
